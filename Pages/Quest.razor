@page "/quest"
@inject ITitleGeneratorService TitleGenerator
@inject IJSRuntime JSRuntime

<PageTitle>Quest</PageTitle>
<link href="css/app.css" rel="stylesheet" />

<div class="container">
    <h1>Quest</h1>
</div>

@if (!string.IsNullOrEmpty(hook))
{
    <div style="margin-top: 50px;" class="text-container">
        <div style="margin-bottom: 2rem;" class="generated-text">
            <h2>Hooks</h2>
            <p>@hook</p>
            <hr />
            <h2>Draws</h2>
            <p>@draw</p>
        </div>

        <div style="margin-bottom: 2rem;" class="generated-text">
            <h2>Plot</h2>
            <p>@plots</p>
            <hr />
            <p>@plotMotivation</p>
        </div>

        <div style="margin-bottom: 2rem;" class="generated-text">
            <h2>Antagonist</h2>
            <p>@antagonist</p>
            <hr />
            <h2>Antagonist Trait</h2>
            <p>@antagonistTrait</p>
        </div>

        <div style="margin-bottom: 2rem;" class="generated-text">
            <h2>Plot Fullfillment</h2>
            <p>@plotFullfilment</p>
            <hr />
            <h2>Plot Location</h2>
            <p>@plotLocation</p>
        </div>

        <div style="margin-bottom: 2rem;" class="generated-text">
            <h2>Obstacles</h2>
            <p>@obstacle</p>
            <hr />
            <h2>Twists</h2>
            <p>@twist</p>
        </div>

        <div style="margin-bottom: 2rem;" class="generated-text">
            <h2>Goals</h2>
            <p>@goals</p>
            <hr />
            <h2>Objectives</h2>
            <p>@objectives</p>
        </div>
    </div>
}

<button @ref="buttonElement" @onclick="async () => await Generate()" class="btn-primary generate-title">Generate Title</button>

@code {
    private string hook = string.Empty;
    private string draw = string.Empty;
    private string plots = string.Empty;
    private string plotMotivation = string.Empty;
    private string antagonist = string.Empty;
    private string antagonistTrait = string.Empty;
    private string plotFullfilment = string.Empty;
    private string plotLocation = string.Empty;
    private string obstacle = string.Empty;
    private string twist = string.Empty;
    private string goals = string.Empty;
    private string objectives = string.Empty;    
    private bool randomizeOptions = false;
    private ElementReference buttonElement;

    private async Task Generate()
    {
        var hooks = await TitleGenerator.GenerateHooksAndDraws();
        var hookSplit = hooks.Split("***");
        (hook, draw) = (hookSplit[0], hookSplit[1]);

        var plot = await TitleGenerator.GeneratePlots();
        var plotSplit = plot.Split("***");
        (plots, plotMotivation) = (plotSplit[0], plotSplit[1]);

        var antagonists = await TitleGenerator.GenerateAntagonist();
        var antSplit = antagonists.Split("***");
        (antagonist, antagonistTrait) = (antSplit[0], antSplit[1]);

        var plotLoc = await TitleGenerator.GeneratePlotFulfillment();
        var locSplit = plotLoc.Split("***");
        (plotFullfilment, plotLocation) = (locSplit[0], locSplit[1]);

        var obstaclesAndTwists = await TitleGenerator.GenerateObstaclesAndTwists();
        var split = obstaclesAndTwists.Split("***");
        (obstacle, twist) = (split[0], split[1]);

        var goalsAndObjectives = await TitleGenerator.GenerateGoalsAndObjectives();
        var splits = goalsAndObjectives.Split("***");
        (goals, objectives) = (splits[0], splits[1]);
        await UnfocusButton();
        StateHasChanged();
    }

    private async Task UnfocusButton()
    {
        await JSRuntime.InvokeVoidAsync("unfocusElement", buttonElement);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.unfocusElement = function(element) {
                    element.blur();
                }
            ");
        }
    }
}
