@page "/Other"
@inject ITitleGeneratorService TitleGenerator
@inject IJSRuntime JSRuntime

<PageTitle>Other Tables</PageTitle>
<h1>Others</h1>
<div class="npc-container">
    @if (!string.IsNullOrEmpty(artifact))
    {
        <div class="text-grid">
            <div class="generated-text">
                <h2>Artifact</h2>
                <p>@artifact</p>
                <h2>Descriptor</h2>
                <p>@descriptor</p>
            </div>
            <div class="generated-text">
                <h2>Location</h2>
                <p>@locationChoice</p>
                <hr />
                <h2>Atmosphere</h2>
                <p>@atmosphere</p>
            </div>
            <div class="generated-text">
                <h2>Building Type</h2>
                <p>@buildingType</p>
                <hr />
                <h2>Building Sinister</h2>
                <p>@buildingSinister</p>
            </div>
            <div class="generated-text">
                <h2>Military</h2>
                <p>@militaryTypeOne</p>
                <hr />
                <h2>OtherWorldly</h2>
                <p>@militaryTypeTwo</p>
            </div>
            <div class="generated-text">
                <h2>Knowledge</h2>
                <p>@knowledge</p>
                <hr />
                <h2>Person</h2>
                <p>@person</p>
            </div>
            <div class="generated-text">
                <h2>Rural</h2>
                <p>@ruralLocation</p>
                <hr />
                <h2>Marine</h2>
                <p>@marineLocation</p>
            </div>
            <div class="generated-text">
                <h2>Ancient or Otherworldly Creature</h2>
                <p>@oldCreature</p>
            </div>
            <div class="generated-text">
                <h2>Legendary Character</h2>
                <p>@legendaryCharacter</p>
            </div>
            <div class="generated-text">
                <h2>Legendary Artifact</h2>
                <p>@legendaryArtifact</p>
            </div>
        </div>
    }

    <button @ref="buttonElement" @onclick="Generate" class="btn-primary generate-title">Generate Title</button>
</div>

<script>
    window.unfocusElement = function () {
        document.activeElement.blur();
    };
</script>

<style>
    .npc-container {
        height: 92vh;
        display: flex;
        flex-direction: column;
        padding: 0.5rem;
        box-sizing: border-box;
        padding-top: 25px;
        overflow: hidden;
    }


    .text-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 0.5rem;
        flex-grow: 1;
        overflow: hidden;
        max-height: calc(92vh - 150px);
    }


    .generated-text {
        color: #d4af37;
        display: flex;
        flex-direction: column;
    }

        .generated-text p {
            font-size: 0.65rem;
            line-height: 1.2;
            margin: 0;
            overflow-y: hidden;
            flex-grow: 1;
            padding-right: 5px;
        }

        .generated-text h2 {
            font-size: 0.9rem;
            margin: 0;
        }
</style>

@code {
    private string artifact = string.Empty;
    private string descriptor = string.Empty;
    private string locationChoice = string.Empty;
    private string atmosphere = string.Empty;
    private string buildingType = string.Empty;
    private string buildingSinister = string.Empty;
    private string militaryTypeOne = string.Empty;
    private string militaryTypeTwo = string.Empty;
    private string knowledge = string.Empty;
    private string person = string.Empty;
    private string ruralLocation = string.Empty;
    private string marineLocation = string.Empty;
    private string oldCreature = string.Empty;
    private string legendaryCharacter = string.Empty;
    private string legendaryArtifact = string.Empty;
    private ElementReference buttonElement;

    protected override async Task OnInitializedAsync()
    {
        await Generate();
    }

    private async Task Generate()
    {
        oldCreature = await TitleGenerator.GenerateOldCreature();
        legendaryCharacter = await TitleGenerator.GenerateLegendaryCharacter();
        legendaryArtifact = await TitleGenerator.GenerateLegendaryArtifact();

        var generatedDescription = await TitleGenerator.GenerateArtifact();
        var descriptionSplit = generatedDescription.Split(new[] { "***" }, StringSplitOptions.None);
        if (descriptionSplit.Length >= 2)
        {
            (artifact, descriptor) = (descriptionSplit[0], descriptionSplit[1]);
        }
        else
        {
            artifact = "No artifact generated";
            descriptor = "No descriptor generated";
        }

        var generatedLocation = await TitleGenerator.GenerateLocation();
        var locationSplit = generatedLocation.Split(new[] { "***" }, StringSplitOptions.None);
        if (locationSplit.Length >= 2)
        {
            (locationChoice, atmosphere) = (locationSplit[0], locationSplit[1]);
        }
        else
        {
            locationChoice = "No location generated";
            atmosphere = "No atmosphere generated";
        }

        var generatedBuilding = await TitleGenerator.GenerateBuilding();
        var buildingSplit = generatedBuilding.Split(new[] { "***" }, StringSplitOptions.None);
        if (buildingSplit.Length >= 2)
        {
            (buildingType, buildingSinister) = (buildingSplit[0], buildingSplit[1]);
        }
        else
        {
            buildingType = "No building type generated";
            buildingSinister = "No building sinister generated";
        }

        var generatedMilitary = await TitleGenerator.GenerateMilitary();
        var militarySplit = generatedMilitary.Split(new[] { "***" }, StringSplitOptions.None);
        if (militarySplit.Length >= 2)
        {
            (militaryTypeOne, militaryTypeTwo) = (militarySplit[0], militarySplit[1]);
        }
        else
        {
            militaryTypeOne = "No military type generated";
            militaryTypeTwo = "No military type generated";
        }

        var generatedKnowledge = await TitleGenerator.GenerateKnowledgePerson();
        var knowledgeSplit = generatedKnowledge.Split(new[] { "***" }, StringSplitOptions.None);
        if (knowledgeSplit.Length >= 2)
        {
            (knowledge, person) = (knowledgeSplit[0], knowledgeSplit[1]);
        }
        else
        {
            knowledge = "No knowledge generated";
            person = "No person generated";
        }

        var generatedLoc = await TitleGenerator.GenerateRuralMarine();
        var locSplit = generatedLoc.Split(new[] { "***" }, StringSplitOptions.None);
        if (locSplit.Length >= 2)
        {
            (ruralLocation, marineLocation) = (locSplit[0], locSplit[1]);
        }
        else
        {
            ruralLocation = "No rural location generated";
            marineLocation = "No marine location generated";
        }

        await UnfocusButton();
    }


    private async Task UnfocusButton()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("unfocusElement");
        }
        catch { }
    }
}