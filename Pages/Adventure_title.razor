@page "/adventure"
@inject ITitleGeneratorService TitleGenerator
@inject IJSRuntime JSRuntime

@using Microsoft.AspNetCore.Components

<PageTitle>Adventure</PageTitle>
<link href="css/app.css" rel="stylesheet" />

<div class="container">
    <h1>Adventure</h1>
</div>

@if (!string.IsNullOrEmpty(generatedTitle))
{
    <div style="margin-top: 50px;" class="text-container">
        <div style="margin-bottom: 2rem;" class="generated-text">
            <h2>Title Structure</h2>
            <p>@HighlightBracketedText(generatedTitle)</p>
        </div>
        <div style="margin-bottom: 2rem;" class="generated-text">
            <h2>Opening scene</h2>
            <p>@HighlightBracketedText(generatedOpeningScene)</p>
            <hr>
            <h2>Descriptor</h2>
            <p>@HighlightBracketedText(generatedSecondOpeningScene)</p>
        </div>
    </div>
}

<div class="bottom-container">
    <div class="tooltip-container">
        <input type="checkbox" id="choose-option-checkbox" name="choose-option-checkbox" @bind="randomizeOptions">
        <label for="choose-option-checkbox">Randomize options</label>
        <span class="tooltip">Check this box to randomize the generated options. E.g., Disabled: Jewel/Gem/Amulet.  Enabled: Gem.</span>
    </div>
</div>
<button @ref="buttonElement" @onclick="Generate" class="btn-primary generate-title">Generate Title</button>

@code {
    private string generatedTitle = string.Empty;
    private string generatedOpeningScene = string.Empty;
    private string generatedSecondOpeningScene = string.Empty;
    private bool randomizeOptions = false;
    private ElementReference buttonElement;

    private async Task Generate()
    {
        var openScene = await TitleGenerator.GenerateOpeningScene();
        var sceneSplit = openScene.Split("***");
        generatedTitle = await TitleGenerator.GenerateTitle(randomizeOptions);
        generatedOpeningScene = sceneSplit[1];
        generatedSecondOpeningScene = sceneSplit[0];
        await UnfocusButton();
    }

    private async Task UnfocusButton()
    {
        await JSRuntime.InvokeVoidAsync("unfocusElement", buttonElement);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.unfocusElement = function(element) {
                    element.blur();
                }
            ");
        }
    }

    private MarkupString HighlightBracketedText(string text)
    {
        if (string.IsNullOrEmpty(text))
        {
            return new MarkupString(string.Empty);
        }

        var highlightedText = System.Text.RegularExpressions.Regex.Replace(
            text,
            @"\[([^\]]+)\]",
            "<span style='height: 5px;' class='highlighted'>[$1]</span>"
    );
        return new MarkupString(highlightedText);
    }
}